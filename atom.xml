<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曾经的自己</title>
  
  <subtitle>光明给我们经验，读书给我们知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-04T09:50:36.573Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>农纷期第一李白</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>静态代理</title>
    <link href="http://yoursite.com/2018/09/04/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/04/静态代理/</id>
    <published>2018-09-04T09:42:58.000Z</published>
    <updated>2018-09-04T09:50:36.573Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-静态代理&quot;&gt;&lt;a href=&quot;#java-静态代理&quot; class=&quot;headerlink&quot; title=&quot;java 静态代理&quot;&gt;&lt;/a&gt;java 静态代理&lt;/h1&gt;&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h3&gt;&lt;p&gt;为其他对象提供一种代理以控制对这个对象的访问称为代理。&lt;/p&gt;
&lt;h4 id=&quot;定义要点：&quot;&gt;&lt;a href=&quot;#定义要点：&quot; class=&quot;headerlink&quot; title=&quot;定义要点：&quot;&gt;&lt;/a&gt;定义要点：&lt;/h4&gt;&lt;p&gt;1) 其他对象：目标对象，想要访问的对象，常被称为被委托对象或被代理对象。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker使用</title>
    <link href="http://yoursite.com/2018/09/03/docker%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/03/docker使用/</id>
    <published>2018-09-03T07:30:32.000Z</published>
    <updated>2018-09-03T08:49:59.753Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker-简介&quot;&gt;&lt;a href=&quot;#docker-简介&quot; class=&quot;headerlink&quot; title=&quot;docker 简介&quot;&gt;&lt;/a&gt;docker 简介&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架包括系统。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://yoursite.com/2018/05/02/%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/05/02/反射/</id>
    <published>2018-05-02T06:01:01.000Z</published>
    <updated>2018-09-04T00:44:30.394Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;IOC容器&quot;&gt;&lt;a href=&quot;#IOC容器&quot; class=&quot;headerlink&quot; title=&quot;IOC容器&quot;&gt;&lt;/a&gt;IOC容器&lt;/h5&gt;&lt;h6 id=&quot;IOC-Inverse-of-Control-控制反转&quot;&gt;&lt;a href=&quot;#IOC-Inverse-of-Control-控制反转&quot; class=&quot;headerlink&quot; title=&quot;IOC(Inverse of Control) 控制反转&quot;&gt;&lt;/a&gt;IOC(Inverse of Control) 控制反转&lt;/h6&gt;&lt;p&gt;对于软件来说，某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定。IOC也被叫做依赖注入，&lt;/p&gt;
&lt;h6 id=&quot;类装载器-ClassLoader&quot;&gt;&lt;a href=&quot;#类装载器-ClassLoader&quot; class=&quot;headerlink&quot; title=&quot;类装载器 ClassLoader&quot;&gt;&lt;/a&gt;类装载器 ClassLoader&lt;/h6&gt;&lt;p&gt;类装载器就是寻找类的字节码文件并狗仔出类在JVM内部表示的对象组件。&lt;br&gt;在java中，类装载器吧一个类装入jvm中，要经过一下步骤：&lt;br&gt;1) 装载&lt;br&gt;2) 连接&lt;br&gt;3) 初始化&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://yoursite.com/2018/02/05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/05/迭代器模式/</id>
    <published>2018-02-05T12:25:44.000Z</published>
    <updated>2018-09-03T08:51:40.109Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h2&gt;&lt;h3 id=&quot;1-迭代器是什么？&quot;&gt;&lt;a href=&quot;#1-迭代器是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.迭代器是什么？&quot;&gt;&lt;/a&gt;1.迭代器是什么？&lt;/h3&gt;&lt;p&gt;迭代器是一个对象，它的工作是遍历并选择序列中的对象，它提供了一种访问一个容器对象中的各个元素，而又不必暴露该对象内部细节的方法。&lt;/p&gt;
&lt;h3 id=&quot;2-容器是什么？&quot;&gt;&lt;a href=&quot;#2-容器是什么？&quot; class=&quot;headerlink&quot; title=&quot;2.容器是什么？&quot;&gt;&lt;/a&gt;2.容器是什么？&lt;/h3&gt;&lt;p&gt;在Java当中，如果有一个类专门用来存放其它类的对象，这个类就叫做容器，或者就叫做集合，集合就是将若干性质相同或相近的类对象组合在一起而形成的一个整体&lt;/p&gt;
&lt;h3 id=&quot;3-我们接触过哪些容器，都是干什么用的？&quot;&gt;&lt;a href=&quot;#3-我们接触过哪些容器，都是干什么用的？&quot; class=&quot;headerlink&quot; title=&quot;3.我们接触过哪些容器，都是干什么用的？&quot;&gt;&lt;/a&gt;3.我们接触过哪些容器，都是干什么用的？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;tomcat容器 如果web服务器应用得到一个指向某个servlet的请求，此时服务器不是把servlet交给servlet本身，而是交给部署该servlet的容器。要有容器向servlet提供http请求和响应，而且要由容器调用servlet的方法，如doPost或者doGet。&lt;/li&gt;
&lt;li&gt;spring容器 Spring容器就是一个巨大的工厂。Spring容器使用Ioc管理所有组成应用系统的组件，用来管理bean的生命周期&lt;/li&gt;
&lt;li&gt;springMVC容器 是Spring的子容器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>redis学习笔记</title>
    <link href="http://yoursite.com/2018/01/18/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/18/redis学习笔记/</id>
    <published>2018-01-18T03:10:33.000Z</published>
    <updated>2018-09-04T02:59:58.902Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-redis简介&quot;&gt;&lt;a href=&quot;#一、-redis简介&quot; class=&quot;headerlink&quot; title=&quot;一、 redis简介&quot;&gt;&lt;/a&gt;一、 redis简介&lt;/h1&gt;&lt;h2 id=&quot;redis是什么？&quot;&gt;&lt;a href=&quot;#redis是什么？&quot; class=&quot;headerlink&quot; title=&quot;redis是什么？&quot;&gt;&lt;/a&gt;redis是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;redis是REmote Dictionary Server(远程字典服务器)的缩写，它以字典结构存储数据，并允许其他应用通过TCP协议读取字典中的内容。&lt;br&gt;Redis是一个开源的、高性能的、基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同场景下的缓存与存储需求。同时 Redis 的诸多高层级功能使其可以胜任消息队列、任务队列等不同的角色。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>java事物隔离级别</title>
    <link href="http://yoursite.com/2018/01/16/java%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2018/01/16/java事物隔离级别/</id>
    <published>2018-01-16T13:29:54.000Z</published>
    <updated>2018-09-03T08:50:21.856Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;形成原因：&quot;&gt;&lt;a href=&quot;#形成原因：&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring表达式语言</title>
    <link href="http://yoursite.com/2018/01/07/Spring%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/01/07/Spring表达式语言/</id>
    <published>2018-01-07T12:08:48.000Z</published>
    <updated>2018-09-04T03:22:15.621Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring表达式语言-SpEL-一段简单的spel入门代码&quot;&gt;&lt;a href=&quot;#Spring表达式语言-SpEL-一段简单的spel入门代码&quot; class=&quot;headerlink&quot; title=&quot;Spring表达式语言:SpEL(一段简单的spel入门代码)&quot;&gt;&lt;/a&gt;Spring表达式语言:SpEL(一段简单的spel入门代码)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spring表达式语言（简称SpEl）是一个支持查询和操作运行时对象导航图功能的强大的表达式语言. 它的语法类似于传统EL，但提供额外的功能，最出色的就是函数调用和简单字符串的模板函数。&lt;/p&gt;
&lt;p&gt;尽管有其他可选的 Java 表达式语言，如 OGNL, MVEL,JBoss EL 等等，但 Spel 创建的初衷是了给 Spring 社区提供一种简单而高效的表达式语言，一种可贯穿整个 Spring 产品组的语言。这种语言的特性应基于 Spring 产品的需求而设计。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
</feed>
